#!/bin/bash

##run this script as root or die! don't use sudo!!!
#quick n'dirty....this only works for armv7 (Raspberry Pi 2)


#important: before compiling edit FFDecsa-Section in the Makefiles for SC an DVBAPI:
#from "PARALLEL   ?= ????" to "PARALLEL   ?= PARALLEL_128_4INT"
#and remove all -mmmx -msse -msse2 -msse3 flags ;-) in the same section

echo "deb-src http://archive.raspbian.org/raspbian/ jessie main contrib non-free rpi" >> /etc/apt/sources.list
apt-get update && apt-get upgrade -y && apt-get dist-upgrade -y
apt-get install -y python-software-properties software-properties-common git git-core fontconfig libjpeg-dev lirc udisks upower xorg alsa-utils mesa-utils librtmp1 libmad0 lm-sensors libmpeg2-4 avahi-daemon libnfs4 consolekit pm-utils samba build-essential libcap-dev gettext libncurses-dev pkg-config w-scan cmake subversion openssl libssl-dev libusb-dev libusb-1.0 libpcsc-perl libpcsclite-dev
apt-get build-dep -y vdr
apt-get build-dep -y kodi

#vdr
### testing ###
install="/home/pi"
tv_vdr="true"
tv_oscam="true"
### testing end ###

#vdr
if [ "$tv_vdr" = "true" ]
  then
  useradd vdr
  usermod -a -G video vdr
  mkdir -p $install/src /var/vdr /var/vdr/record
  mkdir -p /var/lib/vdr/plugins/vnsiserver /var/lib/vdr/plugins/streamdev-server /var/lib/vdr/plugins/sc /var/lib/vdr/plugins/svdrpservice
  chown -R :video /var/vdr /var/lib/vdr/
  chmod -R g+w /var/vdr /var/lib/vdr/
  cd /$install/src
  #git clone git://projects.vdr-developer.org/vdr.git

  #use stable release for testing
  wget https://projects.vdr-developer.org/git/vdr.git/snapshot/vdr-vdr-2.2.0.tar.gz
  tar xfvz vdr-vdr-2.2.0.tar.gz
  rm vdr-vdr-2.2.0.tar.gz
  mv vdr-vdr-2.2.0 vdr
  #end code use stable release for testing

cd /$install/src/vdr/PLUGINS/src
  #get plugin sources (streamdev, vnsi, dvbapi, svdrpservice, sc)
  git clone git://projects.vdr-developer.org/vdr-plugin-streamdev.git
  git clone https://github.com/FernetMenta/vdr-plugin-vnsiserver
  git clone https://github.com/manio/vdr-plugin-dvbapi.git
  git clone https://github.com/3PO/vdr-plugin-sc.git
  wget http://vdr.schmirler.de/svdrpservice/vdr-svdrpservice-1.0.0.tgz
  tar -xzf vdr-svdrpservice-1.0.0.tgz
  rm *.tgz
  ln -s vdr-plugin-streamdev streamdev
  ln -s vdr-plugin-vnsiserver vnsiserver
  ln -s vdr-plugin-dvbapi dvbapi
  ln -s vdr-plugin-sc sc
  ln -s svdrpservice-1.0.0 svdrpservice
  nano vdr-plugin-sc/Makefile
  nano vdr-plugin-dvbapi/Makefile
  cd ../../
  make -j4 && make install
fi

#oscam
if [ "$tv_oscam" = "true" ]
        then
                cd $install/src
                rm -R oscam*
                svn co http://streamboard.de.vu/svn/oscam/trunk oscam-svn
                cd oscam-svn*
                mkdir build
                cd build
                cmake .. -DHAVE_LIBUSB=1 -DWEBIF=1 -DHAVE_DVBAPI=1 -DCARDREADER_SMARGO=1 -DUSE_LIBUSB=1 -DWEBIF=1 -DIRDETO_GUESSING=1 -DCS_ANTICASC=1 -DWITH_DEBUG=1 -DCS_WITH_DOUBLECHECK=1 -DCS_LED=0 -DQBOXHD_LED=0 -DCS_LOGHISTORY=1 -DWITH_SSL=0 -DMODULE_CAMD33=0 -DMODULE_CAMD35=1 -DMODULE_CAMD35_TCP=1 -DMODULE_NEWCAMD=1 -DMODULE_CCCAM=1 -DMODULE_GBOX=1 -DMODULE_RADEGAST=1 -DMODULE_SERIAL=1 -DMODULE_MONITOR=1 -DMODULE_CONSTCW=1 -DREADER_NAGRA=1 -DREADER_IRDETO=1 -DREADER_CONAX=1 -DREADER_CRYPTOWORKS=1 -DREADER_SECA=1 -DREADER_VIACCESS=1 -DREADER_VIDEOGUARD=1 -DREADER_DRE=1 -DREADER_TONGFANG=1 -DCMAKE_BUILD_TYPE=Debug
                make -j4 && make install
fi

#write configs and scripts

#vdr

cat > /var/lib/vdr/vdr.groups <<vdrgroups
vdr
video
vdrgroups

#create vdr-parameter-script
cat > /usr/local/bin/runvdr <<runvdr
#!/bin/sh
#vdr run options file
#path to binary
VDRPRG="/usr/local/bin/vdr"
#options
VDROPTIONS="-w 60 --video=/var/vdr/record --epgfile=/var/vdr/epg.data export VDR_CHARSET_OVERRIDE="ISO-8859-15""
#plugins
VDRPLUGINS="-P vnsiserver -P dvbapi -P streamdev-server -P svdrpservice"
#parameter comand
VDRCMD="\$VDRPRG \$VDROPTIONS \$VDRPLUGINS \$*"
      
KILL="/usr/bin/killall -q -TERM"
# Detect whether the DVB driver is already loaded
# and return 0 if it *is* loaded, 1 if not:
DriverLoaded()
  {
    return 1
  }
# Load all DVB driver modules needed for your hardware:
LoadDriver()
  {
    return 0
  }
# Unload all DVB driver modules loaded in LoadDriver():
UnloadDriver()
  {
    return 0
  }
# Load driver if it hasn't been loaded already:
if ! DriverLoaded; then
  LoadDriver
fi
while (true) do
  eval "\$VDRCMD"
  if test \$? -eq 0 -o \$? -eq 2; then exit; fi
  echo "`date` reloading DVB driver"
  \$KILL \$VDRPRG
  sleep 10
  UnloadDriver
  LoadDriver
  echo "`date` restarting VDR"
done
runvdr

#create setup.conf
cat > /var/lib/vdr/setup.conf <<setupconf
AdaptiveSkipAlternate = 0
AdaptiveSkipInitial = 120
AdaptiveSkipPrevNext = 0
AdaptiveSkipTimeout = 3
AlwaysSortFoldersFirst = 1
AntiAlias = 1
AudioLanguages = 
ChannelEntryTimeout = 1000
ChannelInfoPos = 0
ChannelInfoTime = 5
ChannelsWrap = 0
ColorKey0 = 0
ColorKey1 = 1
ColorKey2 = 2
ColorKey3 = 3
CurrentChannel = 1
CurrentDolby = 0
CurrentVolume = 255
DefaultLifetime = 99
DefaultPriority = 50
DefaultSortModeRec = 1
DelTimeshiftRec = 0
DeviceBondings = 
DiSEqC = 0
DisplaySubtitles = 0
EmergencyExit = 1
EPGBugfixLevel = 3
EPGLanguages = 
EPGLinger = 0
EPGScanTimeout = 5
FoldersInTimerMenu = 1
FontFix = Courier:Bold
FontFixSize = 14
FontFixSizeP = 0.030000
FontOsd = Sans Serif:Bold
FontOsdSize = 15
FontOsdSizeP = 0.031000
FontSml = Sans Serif
FontSmlSize = 13
FontSmlSizeP = 0.028000
InitialChannel = 
InitialVolume = -1
InstantRecordTime = 180
LnbFrequHi = 10600
LnbFrequLo = 9750
LnbSLOF = 11700
MarginStart = 2
MarginStop = 10
MarkInstantRecord = 1
MaxVideoFileSize = 2000
MenuKeyCloses = 0
MenuScrollPage = 1
MenuScrollWrap = 0
MinEventTimeout = 30
MinUserInactivity = 300
MultiSpeedMode = 0
NameInstantRecord = TITLE EPISODE
NextWakeupTime = 0
NumberKeysForChars = 1
OSDAspect = 1.000000
OSDHeight = 403
OSDHeightP = 0.840000
OSDLanguage = 
OSDLeft = 58
OSDLeftP = 0.080000
OSDMessageTime = 1
OSDSkin = lcars
OSDTheme = default
OSDTop = 38
OSDTopP = 0.080000
OSDWidth = 624
OSDWidthP = 0.870000
PauseAtLastMark = 0
PauseKeyHandling = 2
PauseLifetime = 1
PauseOnMarkJump = 1
PauseOnMarkSet = 0
PausePriority = 10
PositionerLastLon = 0
PositionerSpeed = 15
PositionerSwing = 650
PrimaryDVB = 1
ProgressDisplayTime = 0
RcRepeatDelay = 300
RcRepeatDelta = 100
RecordingDirs = 1
RecordKeyHandling = 2
ResumeID = 0
SetSystemTime = 0
ShowChannelNamesWithSource = 0
ShowInfoOnChSwitch = 1
ShowRemainingTime = 0
ShowReplayMode = 0
SiteLat = 0
SiteLon = 0
SkipEdited = 0
SkipSeconds = 60
SkipSecondsRepeat = 60
SplitEditedFiles = 0
StandardCompliance = 0
SubtitleBgTransparency = 0
SubtitleFgTransparency = 0
SubtitleLanguages = 
SubtitleOffset = 0
SVDRPDefaultHost = 
SVDRPHostName = Server
SVDRPPeering = 0
SVDRPTimeout = 300
TimeoutRequChInfo = 1
TimeSource = 
TimeTransponder = 0
UpdateChannels = 5
UseDolbyDigital = 1
UsePositioner = 0
UseSmallFont = 1
UseSubtitle = 1
UseVps = 0
VideoDisplayFormat = 1
VideoFormat = 0
VolumeLinearize = 0
VolumeSteps = 51
VpsMargin = 120
ZapTimeout = 3
dvbapi.OSCamHost = 127.0.0.1
dvbapi.OSCamNetwork = 1
dvbapi.OSCamPort = 33330
setupconf

#create upstart script
cat > /etc/init/vdr.conf <<upstart
# vdr-upstart
description     "linux video disk recorder"
author          "Paul Krause"
start on (local-filesystems and net-device-up IFACE!=lo and dvb-ready)
stop on runlevel [!2345]
exec /usr/local/bin/runvdr > /var/log/vdr.log 2>&1
upstart

#make scripts executable
chmod +x /usr/local/bin/runvdr

#create access rules for vdr
echo "192.168.1.0/24	#any host on the local net" > /var/lib/vdr/allowed_hosts.conf
ln -s /var/lib/vdr/allowed_hosts.conf /var/lib/vdr/svdrphosts.conf
ln -s /var/lib/vdr/allowed_hosts.conf > /var/lib/vdr/plugins/vnsiserver/allowed_hosts.conf
ln -s /var/lib/vdr/allowed_hosts.conf > /var/lib/vdr/plugins/streamdev-server/streamdevhosts.conf
ln -s /var/lib/vdr /etc/vdr


